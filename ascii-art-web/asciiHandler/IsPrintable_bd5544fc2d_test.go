// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-openai-github using AI Type Open AI and AI Model gpt-4

1. Scenario: Empty String
Test the function with an empty string as input. The function should return true as there are no non-printable characters.

2. Scenario: String with only printable ASCII characters
Test the function with a string that contains only printable ASCII characters (32-126). The function should return true.

3. Scenario: String with non-printable ASCII characters
Test the function with a string that contains one or more non-printable ASCII characters (other than 10 and 13). The function should return false.

4. Scenario: String with ASCII character 10 (line feed)
Test the function with a string that contains the ASCII character 10 (line feed). The function should return true as this is an exception in the function.

5. Scenario: String with ASCII character 13 (carriage return)
Test the function with a string that contains the ASCII character 13 (carriage return). The function should return true as this is an exception in the function.

6. Scenario: String with printable ASCII characters and ASCII character 10 
Test the function with a string that contains printable ASCII characters and the ASCII character 10. The function should return true.

7. Scenario: String with printable ASCII characters and ASCII character 13
Test the function with a string that contains printable ASCII characters and the ASCII character 13. The function should return true.

8. Scenario: String with printable ASCII characters, ASCII character 10 and non-printable ASCII characters
Test the function with a string that contains printable ASCII characters, the ASCII character 10 and non-printable ASCII characters. The function should return false.

9. Scenario: String with printable ASCII characters, ASCII character 13 and non-printable ASCII characters
Test the function with a string that contains printable ASCII characters, the ASCII character 13 and non-printable ASCII characters. The function should return false.

10. Scenario: String with only non-printable ASCII characters
Test the function with a string that contains only non-printable ASCII characters (other than 10 and 13). The function should return false.
*/

// ********RoostGPT********
package asciiHandler

import (
	"testing"
)

func TestIsPrintable_bd5544fc2d(t *testing.T) {
	tests := []struct {
		name string
		args string
		want bool
	}{
		{
			name: "Scenario: Empty String",
			args: "",
			want: true,
		},
		{
			name: "Scenario: String with only printable ASCII characters",
			args: "Hello, World!",
			want: true,
		},
		{
			name: "Scenario: String with non-printable ASCII characters",
			args: string([]byte{0x01, 0x02, 0x03}),
			want: false,
		},
		{
			name: "Scenario: String with ASCII character 10 (line feed)",
			args: "Hello,\nWorld!",
			want: true,
		},
		{
			name: "Scenario: String with ASCII character 13 (carriage return)",
			args: "Hello,\rWorld!",
			want: true,
		},
		{
			name: "Scenario: String with printable ASCII characters and ASCII character 10",
			args: "Hello,\nWorld!",
			want: true,
		},
		{
			name: "Scenario: String with printable ASCII characters and ASCII character 13",
			args: "Hello,\rWorld!",
			want: true,
		},
		{
			name: "Scenario: String with printable ASCII characters, ASCII character 10 and non-printable ASCII characters",
			args: "Hello,\nWorld!" + string([]byte{0x01, 0x02, 0x03}),
			want: false,
		},
		{
			name: "Scenario: String with printable ASCII characters, ASCII character 13 and non-printable ASCII characters",
			args: "Hello,\rWorld!" + string([]byte{0x01, 0x02, 0x03}),
			want: false,
		},
		{
			name: "Scenario: String with only non-printable ASCII characters",
			args: string([]byte{0x01, 0x02, 0x03}),
			want: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := IsPrintable(tt.args); got != tt.want {
				t.Errorf("IsPrintable() = %v, want %v", got, tt.want)
			}
		})
	}
}
