// Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k


/*
1. Test with an array of strings including non-regex characters: This scenario is to verify that the function can correctly identify the index of the string in the array that does not contain regex characters.

2. Test with an array of strings only containing regex characters: This scenario is to check the function's performance when given an array where all strings include regex characters.

3. Test with an empty array: This scenario will determine how the function behaves when given an empty array as input. This should handle gracefully.

4. Test with an array of strings but the initial 'i' greater than the length  of array: This scenario is to ensure the function handles invalid 'i' properly.

5. Test with negative 'i': It is to check how the function behaves with negative input for 'i'. 

6. Test with 'i' equals zero: This test will validate the performance of the function when the initial 'i' is zero.

7. Test with an array where non-regex character string located at the last place: This scenario tests the function's ability to recognise the last string in the array as a match.

8. Test with an array of non-string values: While this is not a direct input, negative testing is important to ensure the code can handle unexpected inputs gracefully.

9. Test with an array of strings including some empty ones: This scenario will test if the function can correctly ignore the empty strings.

10. Test with an array consisting of mix characters(strings containing non-regex and regex): This scenario will test the complete functionality by ensuring that the proper index is returned.
*/
package reloaded

import (
	"fmt"
	"testing"
)

func TestBackLine(t *testing.T) {
	var tests = []struct {
		input []string
		i     int
		want  int
	}{
		{[]string{"abc", "def", "!@#$%^", "()"}, 1, 0},  // Test scenario 1
		{[]string{"!@#$%^", "&*()_+", "*&^%\n\"'}, 2, 0},  // Test scenario 2
		{[]string{}, 0, 0},  // Test scenario 3
		{[]string{"abc", "def", "ghi", "jkl"}, 5, 0},  // Test scenario 4
		{[]string{"abc", "def", "ghi", "jkl"}, -2, 0},  // Test scenario 5
		{[]string{"abc", "def", "ghi", "jkl"}, 0, 0},  // Test scenario 6
		{[]string{"abc", "def", "!@#$%^", "jkl"}, 3, 3},  // Test scenario 7
		{[]string{"123", "456", "!@#$%^", "789"}, 2, 1},  // Test scenario 8
		{[]string{"abc", "", "!@#$%^", "jkl"}, 2, 0},  // Test scenario 9
		{[]string{"abc", "!@#$%^", "def", "!@#$%^", "ghi", "!@#$%^", "jkl"}, 6, 4},  // Test scenario 10
	}

	for _, tt := range tests {
		testname := fmt.Sprintf("%v, %v", tt.input, tt.i)
		t.Run(testname, func(t *testing.T) {
			ans := back_line(tt.input, tt.i)
			if ans != tt.want {
				t.Errorf("got %v, want %v", ans, tt.want)
			}
		})
	}
}
