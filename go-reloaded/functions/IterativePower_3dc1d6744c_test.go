// Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k


/*
1. Scenario: Verify the function when the 'power' parameter is equal to 0.
Input: IterativePower(5,0)
Expected output: 1
        
2. Scenario: Verify the function when the 'power' parameter is less than 0.
Input: IterativePower(5,-3)
Expected output: 0
        
3. Scenario: Verify the function when the 'nb' parameter and 'power' parameter is equal to 1.
Input: IterativePower(1,1)
Expected output: 1
        
4. Scenario: Verify the function when the 'nb' parameter is more than 1 and 'power' parameter is equal to 1.
Input: IterativePower(4,1)
Expected output: 4

5. Scenario: Verify the function when the 'nb' parameter is equal to 1 and 'power' parameter is more than 1.
Input: IterativePower(1,5)
Expected output: 1

6. Scenario: Verify the function when the 'nb' parameter and 'power' parameter both are more than 1.
Input: IterativePower(3,3)
Expected output: 27

7. Scenario: Verify the function when the 'nb' parameter and 'power' parameter both are less than 0.
Input: IterativePower(-3,-3)
Expected output: 0

8. Scenario: Verify the function when the 'nb' parameter is equal to 0 irrespective of 'power' parameter.
Input: IterativePower(0,5)
Expected output: 0

9. Scenario: Execute the function for large numbers to check if it handles the results without overflow.
Input: IterativePower(999999,3)
Expected output: 999997000001000

10. Scenario: Verify the function with floating point integers.
Input: IterativePower(2.5,2)
Expected output: Invalid input since the function only accepts integers.
*/
package reloaded

import (
	"testing"
	"fmt"
)

// Define a struct for the test data
type testData struct {
	nb       int
	power    int
	expected int
	desc     string
}

func TestIterativePower_3dc1d6744c(t *testing.T) {

    // Define test data
	data := []testData{
		{5,0,1,"power equals to 0"},
		{5,-3,0,"power less than 0"},
		{1,1,1,"nb and power both equals 1"},
		{4,1,4,"nb more than 1 and power equals 1"},
		{1,5,1,"nb equals 1 and power more than 1"},
		{3,3,27,"nb and power both more than 1"},
		{-3,-3,0,"nb and power both less than 0"},
		{0,5,0,"nb equals 0 irrespective of power"},
		{999999,3,999997000001000,"large numbers without overflow"},
	}

	for _, td := range data {
		t.Run(fmt.Sprintf("IterativePower function where %s", td.desc), func(t *testing.T) {
			got := IterativePower(td.nb, td.power)
			if got != td.expected {
				t.Errorf("IterativePower(%d, %d): got %d, expected %d", td.nb, td.power, got, td.expected)
			} else {
				t.Logf("IterativePower successful for %s scenario", td.desc)
			}
		})
	}
}
